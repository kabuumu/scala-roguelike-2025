package game

import game.entity.*
import game.entity.EntityType.*
import game.event.*
import game.system.*
import game.system.event.GameSystemEvent.GameSystemEvent
import map.Dungeon
import util.LineOfSight

import scala.annotation.tailrec

case class GameState(playerEntityId: String,
                     entities: Seq[Entity],
                     messages: Seq[String] = Nil,
                     dungeon: Dungeon) {
  val playerEntity: Entity = entities.find(_.id == playerEntityId).get

  def getEntity(entityId: String): Option[Entity] = {
    entities.find(_.id == entityId)
  }

  // Phased system execution ordering for explicit lifecycle management
  // This addresses ordering inconsistencies and enables event scoping
  // IMPORTANT: This preserves the exact original system ordering
  private val phases: Seq[Seq[GameSystem]] = Seq(
    // Phase 1: Input processing and early systems
    Seq(
      DeathHandlerSystem, // Keep at original position - tests depend on this timing
      ExperienceSystem,
      EnemyAISystem,
      MovementSystem,
      VelocitySystem,
      WaveSystem,
      ItemUseSystem,
      HealingSystem,
      EquipInputSystem
    ),
    // Phase 2: Creation and spawning
    Seq(
      ProjectileCreationSystem,
      MessageSystem,
      SpawnEntitySystem,
      WaitSystem,
      OpenDoorSystem
    ),
    // Phase 3: Combat processing
    // CollisionEvent events are dropped after this phase
    Seq(
      CollisionCheckSystem,
      AttackSystem,
      RangeCheckSystem,
      CollisionHandlerSystem,
      DamageSystem
    ),
    // Phase 4: Equipment and progression
    Seq(
      EquipmentSystem,
      InventorySystem,
      InitiativeSystem,
      LevelUpSystem,
      SightMemorySystem
    )
  )

  // Maintain backward compatibility by exposing flattened systems
  val systems: Seq[GameSystem] = phases.flatten

  def updateWithSystems(initialEvents: Seq[GameSystemEvent]): GameState = {
    val (_, finalState) = phases.zipWithIndex.foldLeft((initialEvents, this)) {
      case ((incomingEvents, stateAtPhaseStart), (systemsInPhase, phaseIndex)) =>
        // Execute all systems in this phase, accumulating events generated within the phase
        val (stateAfterPhase, phaseEmittedEvents) = systemsInPhase.foldLeft((stateAtPhaseStart, Vector.empty[GameSystemEvent])) {
          case ((currentState, accumulatedPhaseEvents), system) =>
            // Each system sees incoming events plus events generated by previous systems in this phase
            val visibleEvents = incomingEvents ++ accumulatedPhaseEvents
            val (newState, newEvents) = system.update(currentState, visibleEvents)
            (newState, accumulatedPhaseEvents ++ newEvents)
        }

        // Combine incoming events with events generated during this phase
        val allPhaseEvents = incomingEvents ++ phaseEmittedEvents

        // Apply event scoping rules based on phase
        val carryOverEvents: Seq[GameSystemEvent] = phaseIndex match {
          case 2 => // After Phase 3 (collision phase): drop CollisionEvent only
            allPhaseEvents.collect { case e if !e.isInstanceOf[game.system.event.GameSystemEvent.CollisionEvent] => e }
          case _ => // All other phases: carry over all events (including InputEvent)
            allPhaseEvents
        }

        (carryOverEvents, stateAfterPhase)
    }
    finalState
  }


  @scala.annotation.tailrec
  @deprecated
  final def handleEvents(events: Seq[Event]): GameState = {
    if (events.isEmpty) this
    else {
      val (newGameState, newEvents) = events.head.apply(this)
      newGameState.handleEvents(newEvents ++ events.tail)
    }
  }

  def updateEntity(entityId: String, newEntity: Entity): GameState =
    copy(entities = entities.updated(entities.indexWhere(_.id == entityId), newEntity))

  def updateEntity(entityId: String, update: Entity => Entity): GameState = {
    copy(
      entities = entities.updated(entities.indexWhere(_.id == entityId), update(entities.find(_.id == entityId).get))
    )
  }

  def getActor(point: Point): Option[Entity] = {
    entities.find(entity => entity.exists[Movement](_.position == point) && (entity.exists[EntityTypeComponent](entityType => entityType.entityType == EntityType.Enemy || entityType.entityType == EntityType.Player)))
  }

  def add(entity: Entity): GameState = {
    copy(entities = entities :+ entity)
  }

  def remove(entityId: String): GameState = {
    copy(entities = entities.filterNot(_.id == entityId))
  }

  //TODO - remove magic number
  def getVisiblePointsFor(entity: Entity): Set[Point] = for {
    entityPosition <- entity.get[Movement].map(_.position).toSet
    lineOfSight <- LineOfSight.getVisiblePoints(entityPosition, lineOfSightBlockingPoints, 10)
  } yield lineOfSight

  def addMessage(message: String): GameState = {
    copy(messages = message +: messages)
  }

  lazy val lineOfSightBlockingPoints: Set[Point] = dungeon.walls ++ dungeon.rocks ++
    entities
      .filter(_.entityType.isInstanceOf[LockedDoor])
      .flatMap(_.get[Movement].map(_.position))
      .toSet

  lazy val movementBlockingPoints: Set[Point] = dungeon.walls ++ dungeon.water ++ dungeon.rocks ++
    entities
      .filter(entity => entity.get[EntityTypeComponent].exists(c => 
        c.entityType == EntityType.Enemy || c.entityType == EntityType.Player || c.entityType.isInstanceOf[LockedDoor]
      ))
      .flatMap(_.get[Movement].map(_.position))
      .toSet
  
  lazy val drawableChanges: Seq[Set[(Point, Sprite)]] = {
    import game.entity.Drawable.*
    entities.map(_.sprites)
  }
}
