package generated

import indigo.*

// DO NOT EDIT: Generated by Indigo.
object Assets:

  object assets:
    object fonts:
      val KenneyMini: AssetName = AssetName("Kenney Mini.ttf")
      val KenneyPixel: AssetName = AssetName("Kenney Pixel.ttf")

      def assetSet(baseUrl: String): Set[AssetType] =
        Set(
          AssetType.Text(KenneyMini, AssetPath(baseUrl + "assets/fonts/Kenney Mini.ttf")),
          AssetType.Text(KenneyPixel, AssetPath(baseUrl + "assets/fonts/Kenney Pixel.ttf"))
        )
      def assetSet: Set[AssetType] = assetSet("./")

      def assetNameSet: Set[AssetName] =
        Set(
          KenneyMini,
          KenneyPixel
        )

    object generated:
      val PixelFont: AssetName               = AssetName("PixelFont.png")
      val PixelFontMaterial: Material.Bitmap = Material.Bitmap(PixelFont)
      val PixelFontSmall: AssetName               = AssetName("PixelFontSmall.png")
      val PixelFontSmallMaterial: Material.Bitmap = Material.Bitmap(PixelFontSmall)

      def assetSet(baseUrl: String): Set[AssetType] =
        Set(
          AssetType.Image(PixelFont, AssetPath(baseUrl + "assets/generated/PixelFont.png"), Option(AssetTag("generated"))),
          AssetType.Image(PixelFontSmall, AssetPath(baseUrl + "assets/generated/PixelFontSmall.png"), Option(AssetTag("generated")))
        )
      def assetSet: Set[AssetType] = assetSet("./")

      def assetNameSet: Set[AssetName] =
        Set(
          PixelFont,
          PixelFontSmall
        )

    object sprites:
      val sprites: AssetName               = AssetName("sprites.png")
      val spritesMaterial: Material.Bitmap = Material.Bitmap(sprites)

      def assetSet(baseUrl: String): Set[AssetType] =
        Set(
          AssetType.Image(sprites, AssetPath(baseUrl + "assets/sprites/sprites.png"), Option(AssetTag("sprites")))
        )
      def assetSet: Set[AssetType] = assetSet("./")

      def assetNameSet: Set[AssetName] =
        Set(
          sprites
        )



